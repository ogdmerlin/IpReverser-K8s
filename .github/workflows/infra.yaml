name: Terraform Infra Deployment

on: 
    push:
        branches: 
            - main #Trigger deployment on push to main branch
    pull_request:
        branches: 
            - main #Trigger deployment on pull request to main branch   

permissions:
    id-token: write
    contents: read

jobs:
    terraform:
        name: Deploy Infrastructure 
        runs-on: ubuntu-latest
        env:
          TF_version: latest
          TF_working_dir: ./K8s_Infra/
          TF_VAR_digitalocean_region: ${{ secrets.Region }}
          TF_VAR_BACKEND_digitalocean_spaces_bucket: ${{ secrets.DIGITALOCEAN_SPACES_BUCKET }}
          TF_VAR_BACKEND_digitalocean_spaces_access_key: ${{ secrets.DIGITALOCEAN_SPACES_ACCESS_KEY }}
          TF_VAR_BACKEND_digitalocean_spaces_secret_key: ${{ secrets.DIGITALOCEAN_SPACES_SECRET_KEY }}
          TF_VAR_digitalocean_api_token: ${{ secrets.DIGITALOCEAN_API_TOKEN }}

        steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: ${{ env.TF_version }}

        - name: Set Terraform Backend Key
          run: echo "TF_VAR_BACKEND_digitalocean_spaces_key=${GITHUB_REPOSITORY#*/}/${GITHUB_REF#refs/heads/}/terraform.tfstate" >> $GITHUB_ENV

        - name: Set Digital Space Credentials
          run: |
            echo "TF_VAR_digitalocean_region=${{ secrets.Region }}" >> $GITHUB_ENV
            echo "TF_VAR_BACKEND_digitalocean_spaces_access_key=${{ secrets.DIGITALOCEAN_SPACES_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "TF_VAR_BACKEND_digitalocean_spaces_secret_key=${{ secrets.DIGITALOCEAN_SPACES_SECRET_KEY  }}" >> $GITHUB_ENV
            echo "TF_VAR_digitalocean_api_token=${{ secrets.DIGITALOCEAN_API_TOKEN }}" >> $GITHUB_ENV

        - name: Terraform Format
          id: fmt
          working-directory: ${{ env.TF_working_dir }}
          run: terraform fmt -check
          continue-on-error: true

        - name: Terraform Init
          id: init
          working-directory: ${{ env.TF_working_dir }}
          run: |
            terraform init -input=false \
              -backend-config="bucket=${TF_VAR_BACKEND_digitalocean_spaces_bucket}" \
              -backend-config="key=${TF_VAR_BACKEND_digitalocean_spaces_key}" \
              -backend-config="access_key=${TF_VAR_BACKEND_digitalocean_spaces_access_key}" \
              -backend-config="secret_key=${TF_VAR_BACKEND_digitalocean_spaces_secret_key}" \
              -backend-config="region=${TF_VAR_digitalocean_region}" \


        - name: Terraform Plan
          id: plan
          working-directory: ${{ env.TF_working_dir }}
          run: terraform plan -var="digitalocean_token=${TF_VAR_digitalocean_api_token}" -input=false -out="${GITHUB_SHA:0:7}.tfplan"

        - name: Terraform Apply
          id: apply
          working-directory: ${{ env.TF_working_dir }}
          run: terraform apply --auto-approve -var="digitalocean_token=${TF_VAR_digitalocean_api_token}" -input=false "${GITHUB_SHA:0:7}.tfplan"

        - name: Cluster ID
          id: get-cluster-id
          working-directory: ${{ env.TF_working_dir }}
          run: |
            echo "CLUSTER_ID=$(terraform output -raw cluster_id)" >> $GITHUB_ENV

    application:
        name: Helm Deploy
        runs-on: ubuntu-latest
        needs: terraform
        env:
          TF_VAR_digitalocean_api_token: ${{ secrets.DIGITALOCEAN_API_TOKEN }}

        steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Install Helm
          run: |
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh

        - name: Install doctl (DigitalOcean CLI)
          run: |
            curl -sL https://github.com/digitalocean/doctl/releases/latest/download/doctl-$(uname -s)-$(uname -m) > /usr/local/bin/doctl
            chmod +x /usr/local/bin/doctl

        - name: Authenticate doctl
          run: doctl auth init --access-token ${{ secrets.DIGITALOCEAN_API_TOKEN }}

        - name: Fetch and Configure Kubeconfig using doctl
          run: |
            mkdir -p $HOME/.kube
            doctl kubernetes cluster kubeconfig save $CLUSTER_ID
            chmod 600 $HOME/.kube/config

        - name: Configure Kubeconfig
          run: |
            mkdir -p $HOME/.kube/
            echo "$KUBECONFIG" | base64 -d > $HOME/.kube/config
            chmod 600 $HOME/.kube/config

        - name: Helm Deploy
          working-directory: ./reverse-ip
          run: |
            helm upgrade --install reverseip . -f values.yaml \
            --namespace default \
            --wait

        - name: Verify Deployment
          run: kubectl get pods -n default